name: 'terraform-azure-github-cicd & Checkov'

on:
  push:
    branches:
      - main
      - checkov
  pull_request:
    branches:
      - main
      - checkov
  workflow_dispatch: #this attribute will enable the manual run to the pipeline
  

# Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
defaults:
  run:
    shell: bash
    working-directory: ./dev
env: 
  ROOT_PATH: '${{github.workspace}}/dev'
  ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
  ARM_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
  ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
  ARM_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.13.5
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Run Checkov action
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ./dev
        soft_fail: true

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -recursive

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      continue-on-error: true

    - name: add plan comments
      uses: actions/github-script@v4.1.0
      if: github.event_name == 'pull_request'
      env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          script: |
           const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
           #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
           #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
           #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`
            
            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
           
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve