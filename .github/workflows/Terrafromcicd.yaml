name: 'terraform-Azure'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: #this attribute will enable the manual run to the pipeline
  

# Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
defaults:
  run:
    shell: bash
env: 
  ROOT_PATH: '${{github.workspace}}/dev'
  ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
  ARM_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
  ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
  ARM_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}


jobs:
  terraform_plan:
    name: 'terraform plan'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
  
    - name: terraform init
      run: terraform init
      working-directory: ${{ env.ROOT_PATH }}

    - name: terraform fmt
      run: terraform fmt
      working-directory: ${{ env.ROOT_PATH }}

   - name: Terraform Plan
     if: github.event_name == 'pull_request'
     run: terraform plan -no-color
     continue-on-error: true
     working-directory: ${{ env.ROOT_PATH }}

  - name: Update Pull Request
    uses: actions/github-script@0.9.0
    if: github.event_name == 'pull_request'
    env:
     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
    with:
     github-token: ${{ secrets.GITHUB_TOKEN }}
     script: |
      const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

      <details><summary>Show Plan</summary>

      \`\`\`\n
      ${process.env.PLAN}
      \`\`\`

      </details>

      *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      github.issues.createComment({
        issue_number: context.issue.number,
        owner: context.repo.owner,
        repo: context.repo.repo,
        body: output
      })

    - name: Terraform Plan Status
       if: steps.plan.outcome == 'failure'
      run: exit 1

  terraform_apply:
    name: 'terraform apply'
    needs: [terraform_plan]
    runs-on: ubuntu-latest
    environment: dev
    
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
 
    - name: terraform Init
      run: terraform init
      working-directory: ${{ env.ROOT_PATH }}

    - name: terraform Init
      run: echo 'var -> ${{inputs.tf_destroy}}'
      working-directory: ${{ env.ROOT_PATH }}

      #github.ref == 'refs/heads/main' && github.event_name == 'push'
    - name: terraform Apply
      run: terraform apply -auto-approve
      if: ${{inputs.tf_destroy}} == false
      working-directory: ${{ env.ROOT_PATH }}

    # - name: terraform destroy
    #   run: terraform destroy -auto-approve
    #   if: ${{inputs.tf_destroy}} == true
    #   working-directory: ${{ env.ROOT_PATH }}